describe '<%= nameCapitalized %>Repository', ->
  t = {}

  t.<%= namePlural %> = [{objectId: 1, title: 'aaa'}, {objectId: 2, title: 'bbb'}]
  t.other<%= nameCapitalized %>s = [{objectId: 3, title: 'ccc'}, {objectId: 4, title: 'ddd'}]
  
  beforeEach -> module('voyageVoyage')

  beforeEach(inject ($rootScope, <%= nameCapitalized %>Repository, $httpBackend, Entity) ->
    t.$scope = $rootScope.$new()
    t.<%= nameCapitalized %>Repository = <%= nameCapitalized %>Repository
    t.$httpBackend = $httpBackend
    t.Entity = Entity )

  it 'should init an array to store data', ->
    expect(Array.isArray(t.<%= nameCapitalized %>Repository.<%= namePlural %>)).toBeTruthy()
  it 'should have all method', ->
    expect(typeof t.<%= nameCapitalized %>Repository.all).toBe('function')
  it 'should have getById method', ->
    expect(typeof t.<%= nameCapitalized %>Repository.getById).toBe('function')
  it 'should have save method', ->
    expect(typeof t.<%= nameCapitalized %>Repository.save).toBe('function')
  it 'should have remove method', ->
    expect(typeof t.<%= nameCapitalized %>Repository.remove).toBe('function')

  describe 'all', ->
    describe 'when the <%= namePlural %> array is empty', ->
      beforeEach ->
        t.getAll = t.$httpBackend.whenGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>').respond(JSON.stringify({ results: t.<%= namePlural %> }))

      it 'should fetch the data from server', ->
        t.$httpBackend.expectGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>')
        t.<%= nameCapitalized %>Repository.all()
        t.$httpBackend.flush()
        t.$httpBackend.verifyNoOutstandingRequest()

      it 'should populate the <%= namePlural %> array', ->
        t.<%= nameCapitalized %>Repository.all()
        t.$httpBackend.flush()
        expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toEqual(2)

      it 'should enclose a $promise in the array', ->
        expect(t.<%= nameCapitalized %>Repository.all().$promise).toBeDefined()

      it '$promise should return the <%= namePlural %> array', ->
        <%= namePlural %> = null
        t.<%= nameCapitalized %>Repository.all().$promise.then (response) ->
          <%= namePlural %> = response
        t.$httpBackend.flush()
        expect(<%= namePlural %>.length).toBe(2)
        
      it 'returns the <%= namePlural %> array and it has been populated after a while', ->
        <%= namePlural %> = t.<%= nameCapitalized %>Repository.all()
        expect(<%= namePlural %>.length).toBe(0)
        t.$httpBackend.flush()
        expect(<%= namePlural %>.length).toBe(2)
        expect(<%= namePlural %>).toBe(t.<%= nameCapitalized %>Repository.<%= namePlural %>)

      describe 'with refresh option', ->
        beforeEach -> t.<%= nameCapitalized %>Repository.all()
        it 'should clear the array and fetch the new data', ->
          t.getAll.respond(JSON.stringify({ results: t.other<%= nameCapitalized %>s }))
          t.<%= nameCapitalized %>Repository.all()
          t.$httpBackend.flush()
          expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>[0].objectId).toBe(3)
          expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>[1].objectId).toBe(4)

      describe 'when cached data', ->
        beforeEach ->
          t.<%= nameCapitalized %>Repository.all()
          t.$httpBackend.flush()

        it 'should not fetch data from server if it is not specified', ->
          t.$httpBackend.expectGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>')
          t.<%= nameCapitalized %>Repository.all()
          expect(t.$httpBackend.verifyNoOutstandingExpectation).toThrow()
          
        it 'should enclose a $promise in the array', ->
          expect(t.<%= nameCapitalized %>Repository.all().$promise).toBeDefined()

        it '$promise should return the <%= namePlural %> array', ->
          <%= namePlural %> = null
          t.<%= nameCapitalized %>Repository.all().$promise.then (response) ->
            <%= namePlural %> = response
          t.$scope.$digest()
          expect(<%= namePlural %>.length).toBe(2)

        it 'returns the <%= namePlural %> array', ->
          <%= namePlural %> = t.<%= nameCapitalized %>Repository.all()
          expect(<%= namePlural %>).toBe(t.<%= nameCapitalized %>Repository.<%= namePlural %>)

  describe 'getById', ->
    describe 'when non-cached data', ->
      beforeEach ->
        t.$httpBackend.whenGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1').respond(JSON.stringify(t.<%= namePlural %>[0]))

      it 'should return the <%= nameSingular %> and resolve it later', ->
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.getById(1)
        expect(<%= nameSingular %>.objectId).not.toBeDefined()
        t.$httpBackend.flush()
        expect(<%= nameSingular %>.objectId).toEqual(1)

      it 'should store the loaded <%= nameSingular %> in the <%= namePlural %> array', ->
        expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(0)
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.getById(1)
        t.$httpBackend.flush()
        expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(1)

      it 'should enclose $promise in the <%= nameSingular %>', ->
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.getById(1)
        expect(<%= nameSingular %>.$promise).toBeDefined()

      it '$promise success callback should return the <%= nameSingular %>', ->
        <%= nameSingular %> = null
        t.<%= nameCapitalized %>Repository.getById(1).$promise.then (response) ->
          <%= nameSingular %> = response
        t.$httpBackend.flush()
        expect(<%= nameSingular %>.objectId).toBe(1)

      xit 'should wraps the <%= nameSingular %> into Entity class', ->
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.getById(1)
        t.$httpBackend.flush()
        expect(<%= nameSingular %>.constructor.name).toEqual('Entity')

    describe 'when cached data', ->
      beforeEach ->
        t.$httpBackend.whenGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>').respond(JSON.stringify({ results: t.<%= namePlural %> }))
        t.<%= nameCapitalized %>Repository.all()
        t.$httpBackend.flush()

      it 'should enclose $promise in the <%= nameSingular %>', ->
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.getById(1)
        expect(<%= nameSingular %>.$promise).toBeDefined()

      it 'should not fetch the <%= nameSingular %> from server', ->
        t.$httpBackend.expectGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1')
        t.<%= nameCapitalized %>Repository.getById(1)
        expect(t.$httpBackend.verifyNoOutstandingExpectation).toThrow()
        
      it '$promise success callback should return the <%= nameSingular %>', ->
        <%= nameSingular %> = null
        t.<%= nameCapitalized %>Repository.getById(1).$promise.then (response) ->
          <%= nameSingular %> = response
        t.$scope.$digest()
        expect(<%= nameSingular %>.objectId).toBe(1)

  describe 'save', ->
    describe 'when a new object', ->
      beforeEach ->
        t.$httpBackend.whenPOST(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>').respond(200, JSON.stringify({ objectId: 5 }))
        t.$httpBackend.expectPOST(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>')
      it 'should send a POST request to the server', ->
        <%= nameSingular %> = { title: 'new' }
        t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        t.$httpBackend.flush()
        expect(t.$httpBackend.verifyNoOutstandingExpectation).not.toThrow()

      it 'should add the object to the <%= namePlural %> array', ->
        <%= nameSingular %> = { title: 'new' }
        expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(0)
        t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        t.$httpBackend.flush()
        expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(1)

      it 'should set objectId property of the object', ->
        <%= nameSingular %> = { title: 'new' }
        expect(<%= nameSingular %>.objectId).not.toBeDefined()
        t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        t.$httpBackend.flush()
        expect(<%= nameSingular %>.objectId).toBeDefined()

      it 'should return a promise object', ->
        <%= nameSingular %> = { title: 'new' }
        result = t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        expect(result.constructor.name).toEqual('Promise')

    describe 'when an existing object', ->
      beforeEach ->
        t.$httpBackend.whenGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>').respond(JSON.stringify({ results: t.<%= namePlural %> }))
        t.<%= nameCapitalized %>Repository.all()
        t.$httpBackend.flush()

      it 'should send a PUT request to the server', ->
        t.$httpBackend.whenPUT(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1').respond(201)
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.<%= namePlural %>[0]
        <%= nameSingular %>.title = 'eee'
        t.$httpBackend.expectPUT(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1')
        t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        t.$httpBackend.flush()
        expect(t.$httpBackend.verifyNoOutstandingExpectation).not.toThrow()
        
      it 'should return a promise object', ->
        <%= nameSingular %> = t.<%= nameCapitalized %>Repository.<%= namePlural %>[0]
        result = t.<%= nameCapitalized %>Repository.save(<%= nameSingular %>)
        expect(result.constructor.name).toEqual('Promise')

  describe 'remove', ->
    beforeEach ->
      t.$httpBackend.whenGET(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>').respond(JSON.stringify({ results: t.<%= namePlural %> }))
      t.<%= nameCapitalized %>Repository.all()
      t.$httpBackend.flush()
      t.$httpBackend.whenDELETE(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1').respond(200)

    it 'should make a DELETE request to the server', ->
      <%= nameSingular %> = t.<%= nameCapitalized %>Repository.<%= namePlural %>[0]
      t.<%= nameCapitalized %>Repository.remove(<%= nameSingular %>)
      t.$httpBackend.expectDELETE(t.<%= nameCapitalized %>Repository.baseUrl + '<%= nameSingular %>/1')
      expect(t.$httpBackend.verifyNoOutstandingExpectation).not.toThrow()

    it 'should remove the <%= nameSingular %> from the <%= namePlural %> array', ->
      expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(2)
      <%= nameSingular %> = t.<%= nameCapitalized %>Repository.<%= namePlural %>[0]
      t.<%= nameCapitalized %>Repository.remove(<%= nameSingular %>)
      t.$httpBackend.flush()
      expect(t.<%= nameCapitalized %>Repository.<%= namePlural %>.length).toBe(1)

    it 'should return a promise object', ->
      <%= nameSingular %> = t.<%= nameCapitalized %>Repository.<%= namePlural %>[0]
      result = t.<%= nameCapitalized %>Repository.remove(<%= nameSingular %>)
      expect(result.constructor.name).toEqual('Promise')
